{
  "openapi" : "3.0.0",
  "info" : {
    "contact" : {
      "name" : "Robert Wagner"
    },
    "description" : "Interface to the mlp_backend Plattform",
    "title" : "mlp_backend",
    "version" : "0.0.2"
  },
  "servers" : [ {
    "url" : "/mlp_backend"
  }, {
    "url" : "https://test-url.com/mlp_backend",
    "variables" : {
      "environment" : {
        "default" : "dit.",
        "enum" : [ "dit.", "dev.", "staging.", "" ]
      }
    }
  }, {
    "url" : "{url}",
    "variables" : {
      "url" : {
        "default" : "http://localhost"
      }
    }
  } ],
  "security" : [ {
    "basicAuth" : [ ]
  }, {
    "access_token" : [ ]
  }, {
    "bearer_auth" : [ ]
  } ],
  "tags" : [ {
    "description" : "initial user signup",
    "name" : "registration"
  }, {
    "description" : "maintenance of user master data",
    "name" : "maintenance"
  } ],
  "paths" : {
    "/jwt" : {
      "get" : {
        "description" : "get jwt token for further requests",
        "operationId" : "jwt_get",
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            },
            "description" : "token created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "unexpected error"
          }
        },
        "security" : [ ],
        "summary" : "get inital token",
        "tags" : [ "jwt" ]
      }
    },
    "/user" : {
      "get" : {
        "description" : "get the persons data using current credentials",
        "operationId" : "user_get",
        "parameters" : [ {
          "explode" : true,
          "in" : "query",
          "name" : "user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/User"
                }
              }
            },
            "description" : "person found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "unexpected error"
          }
        },
        "security" : [ {
          "bearer_auth" : [ ]
        } ],
        "summary" : "get person data",
        "tags" : [ "maintenance" ],
        "x-user_role" : [ "customer" ]
      }
    },
    "/user/{user_name}/logout" : {
      "get" : {
        "description" : "get the persons data using current credentials",
        "operationId" : "user_logout",
        "parameters" : [ {
          "explode" : false,
          "in" : "path",
          "name" : "user_name",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "style" : "simple"
        } ],
        "responses" : {
          "200" : {
            "description" : "ok"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "unexpected error"
          }
        },
        "security" : [ {
          "bearer_auth" : [ ]
        } ],
        "summary" : "get person data",
        "tags" : [ "maintenance" ]
      }
    },
    "/user/signup_user" : {
      "post" : {
        "description" : "create a person using name, given name in the body and email address/password in basic auth header. this email address will receive a mail to activate the account.",
        "operationId" : "user_create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NewUser"
              }
            }
          },
          "description" : "Address to add",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserId"
                }
              }
            },
            "description" : "person created"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "unexpected error"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "person already created"
          }
        },
        "security" : [ ],
        "summary" : "create a person",
        "tags" : [ "registration" ]
      }
    },
    "/user/verify" : {
      "post" : {
        "description" : "create a person using name, given name in the body and email address/password in basic auth header. this email address will receive a mail to activate the account.",
        "operationId" : "user_verify",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserVerify"
              }
            }
          },
          "description" : "verify a token",
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "person verified"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "unexpected error"
          },
          "409" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "person already created"
          }
        },
        "security" : [ ],
        "summary" : "verify a person",
        "tags" : [ "registration" ]
      }
    },
    "/user/login" : {
      "post" : {
        "description" : "create a person using name, given name in the body and email address/password in basic auth header. this email address will receive a mail to activate the account.",
        "operationId" : "user_login",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserLogin"
              }
            }
          },
          "description" : "verify a token",
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Token"
                }
              }
            },
            "description" : "person found"
          },
          "400" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Error"
                }
              }
            },
            "description" : "unexpected error"
          }
        },
        "security" : [ {
          "bearer_auth" : [ ]
        } ],
        "summary" : "login a person",
        "tags" : [ "maintenance" ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "NewUser" : {
        "example" : {
          "email_address:" : "email_address:",
          "username" : "username"
        },
        "properties" : {
          "email_address:" : {
            "type" : "string"
          },
          "username" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "UserId" : {
        "example" : {
          "user_id" : 0
        },
        "properties" : {
          "user_id" : {
            "type" : "integer"
          }
        },
        "type" : "object"
      },
      "Error" : {
        "properties" : {
          "error_code" : {
            "type" : "integer"
          },
          "error_message" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "User" : {
        "example" : {
          "email_address" : "email_address",
          "user_id" : 0,
          "user_name" : "user_name"
        },
        "properties" : {
          "user_id" : {
            "type" : "integer"
          },
          "user_name" : {
            "type" : "string"
          },
          "email_address" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "UserVerify" : {
        "example" : {
          "password" : "password",
          "verification_code" : "verification_code"
        },
        "properties" : {
          "verification_code" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "UserLogin" : {
        "example" : {
          "password" : "password",
          "user_name" : "user_name"
        },
        "properties" : {
          "user_name" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        },
        "type" : "object"
      },
      "Token" : {
        "example" : {
          "token" : "token"
        },
        "properties" : {
          "token" : {
            "type" : "string"
          }
        },
        "type" : "object"
      }
    },
    "securitySchemes" : {
      "basicAuth" : {
        "description" : "email address and password",
        "scheme" : "basic",
        "type" : "http"
      },
      "access_token" : {
        "description" : "the access_token received from the idp",
        "scheme" : "bearer",
        "type" : "http"
      },
      "bearer_auth" : {
        "bearerFormat" : "JWT",
        "scheme" : "bearer",
        "type" : "http"
      }
    }
  }
}
